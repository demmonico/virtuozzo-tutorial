{"name":"Руководство по созданию и управлению контейнерами и виртуальными машинами на базе Virtuozzo","tagline":"","body":"## Содержание\r\n1. [Введение в виртуализацию](#Введение-в-виртуализацию)\r\n  - [Эмуляция оборудования](#Эмуляция-оборудования)\r\n  - [Полная виртуализация](#Полная-виртуализация)\r\n  - [Паравиртуализация](#Паравиртуализация)\r\n  - [Виртуализация уровня операционной системы](#Виртуализация-уровня-операционной-системы)\r\n  - [Virtuozzo — объединение технологий виртуализации уровня ОС и полной виртуализации](#virtuozzo--объединение-технологий-виртуализации-уровня-ОС-и-полной-виртуализации)\r\n2. [Краткая история проекта Virtuozzo](#Краткая-история-проекта-virtuozzo)\r\n3. [Установка и подготовительные действия](#Установка-и-подготовительные-действия)\r\n  - [Установка Virtuozzo с помощью ISO-образа (bare-metal installation)](#Установка-virtuozzo-с-помощью-iso-образа-bare-metal-installation)\r\n  - [Установка Virtuozzo на заранее установленный дистрибутив](#Установка-virtuozzo-на-заранее-установленный-дистрибутив)\r\n  - [Подготовительные действия](#Подготовительные-действия)\r\n4. [Управление шаблонами гостевых ОС](#Управление-шаблонами-гостевых-ОС)\r\n5. [Создание и настройка контейнеров](#Создание-и-настройка-контейнеров)\r\n  - [Конфигурационные файлы](#Конфигурационные-файлы)\r\n  - [Создание контейнера](#Создание-контейнера)\r\n  - [Настройка контейнера](#Настройка-контейнера)\r\n  - [Запуск и вход](#Запуск-и-вход)\r\n6. [Управление контейнерами](#Управление-контейнерами)\r\n  - [Управление состоянием контейнера](#Управление-состоянием-контейнера)\r\n  - [Клонирование контейнера](#Клонирование-контейнера)\r\n  - [Запуск команд в контейнере с хост-ноды](#Запуск-команд-в-контейнере-с-хост-ноды)\r\n  - [Расширенная информация о контейнерах](#Расширенная-информация-о-контейнерах)\r\n7. [Управление ресурсами](#Управление-ресурсами)\r\n  - [Дисковые квоты](#Дисковые-квоты)\r\n  - [Процессор](#Процессор)\r\n  - [Операции ввода/вывода](#Операции-вводавывода)\r\n  - [Память](#Память)\r\n  - [Мониторинг ресурсов](#Мониторинг-ресурсов)\r\n8. [Ссылки](#Ссылки)\r\n9. [Лицензия](#Лицензия)\r\n\r\n## Введение в виртуализацию\r\nВиртуализация — предоставление наборов вычислительных ресурсов или их логического объединения, абстрагированное от аппаратной реализации, и обеспечивающее изоляцию вычислительных процессов.\r\n\r\nВиртуализацию можно использовать в:\r\n* консолидации серверов (позволяет мигрировать с физических серверов на виртуальные, тем самым увеличивается коэффициент использования аппаратуры, что позволяет существенно сэкономить на аппаратуре, электроэнергии и обслуживании)\r\n* разработке и тестировании приложений (возможность одновременно запускать несколько различных ОС, это удобно при разработке кроссплатформенного ПО, тем самым значительно повышается качество, скорость разработки и тестирования приложений)\r\n* бизнесе (использование виртуализации в бизнесе растет с каждым днем и постоянно находятся новые способы применения этой технологии, например, возможность безболезненно сделать снапшот)\r\n* организации виртуальных рабочих станций (так называемых \"тонких клиентов\")\r\n\r\n*Общая схема взаимодействия виртуализации с аппаратурой и программным обеспечением*\r\n![Общая схема взаимодействия виртуализации с аппаратурой и программным обеспечением](https://raw.githubusercontent.com/Amet13/virtuozzo-tutorial/master/images/virt-scheme.png)\r\n\r\nПонятие виртуализации можно условно разделить на две категории:\r\n* виртуализация платформ, продуктом этого вида виртуализации являются виртуальные машины\r\n* виртуализация ресурсов преследует целью комбинирование или упрощение представления аппаратных ресурсов для пользователя и получение неких пользовательских абстракций оборудования, пространств имен, сетей\r\n\r\nВзаимодействие приложений и операционной системы (ОС) с аппаратным обеспечением осуществляется через абстрагированный слой виртуализации.\r\n\r\nСуществует несколько подходов организации виртуализации:\r\n* эмуляция оборудования (QEMU, Bochs, Dynamips)\r\n* полная виртуализация (KVM, HyperV, VirtualBox)\r\n* паравиртуализация (Xen, L4, Trango)\r\n* виртуализация уровня ОС (LXC, Virtuozzo, Jails, Solaris Zones)\r\n\r\n### Эмуляция оборудования\r\nЭмуляция аппаратных средств является одним из самых сложных методов виртуализации.\r\nВ то же время главной проблемой при эмуляции аппаратных средств является низкая скорость работы, в связи с тем, что каждая команда моделируется на основных аппаратных средствах.\r\n\r\nВ эмуляции оборудования используется механизм динамической трансляции, то есть каждая из инструкций эмулируемой платформы заменяется на заранее подготовленный фрагмент инструкций физического процессора.\r\n\r\nОднако метод позволяет использовать виртуализированные аппаратные средства еще до выхода реальных.\r\nНапример, управление неизмененной ОС, предназначенной для PowerPC на системе с ARM процессором.\r\n\r\n*Эмуляция оборудования моделирует аппаратные средства*\r\n![Схема эмуляции оборудования](https://raw.githubusercontent.com/Amet13/virtuozzo-tutorial/master/images/emulation.png)\r\n\r\n### Полная виртуализация\r\nПолная виртуализация использует гипервизор, который осуществляет связь между гостевой ОС и аппаратными средствами физического сервера.\r\nВ связи с тем, что вся работа с гостевой операционной системой проходит через гипервизор, скорость работы данного типа виртуализации ниже чем в случае прямого взаимодействия с аппаратурой.\r\nОсновным преимуществом является то, что в ОС не вносятся никакие изменения, единственное ограничение — операционная система должна поддерживать основные аппаратные средства.\r\n\r\n*Полная виртуализация использует гипервизор*\r\n![Схема полной виртуализации](https://raw.githubusercontent.com/Amet13/virtuozzo-tutorial/master/images/full-virt.png)\r\n\r\nПолная виртуализация возможна исключительно при условии правильной комбинации оборудования и программного обеспечения.\r\n\r\n### Паравиртуализация\r\nПаравиртуализация имеет некоторые сходства с полной виртуализацией.\r\nЭтот метод использует гипервизор для разделения доступа к основным аппаратным средствам, но объединяет код, касающийся виртуализации, в непосредственно операционную систему, поэтому недостатком метода является то, что гостевая ОС должна быть изменена для гипервизора.\r\nНо паравиртуализация существенно быстрее полной виртуализации, скорость работы виртуальной машины приближена к скорости реальной, это осуществляется за счет отсутствия эмуляции аппаратуры и учета существования гипервизора при выполнении системных вызовов в коде ядра.\r\nВместо привилегированных операций совершаются гипервызовы обращения ядра гостевой ОС к гипервизору с просьбой о выполнении операции.\r\n\r\n*Паравиртуализация разделяет процесс с гостевой ОС*\r\n![Схема паравиртуализации](https://raw.githubusercontent.com/Amet13/virtuozzo-tutorial/master/images/paravirt.png)\r\n\r\nВ паравиртуальном режиме (PV) оборудование не эмулируется, и гостевая операционная система должна быть специальным образом модифицирована для работы в таком окружении.\r\nНачиная с версии 3.0, ядро Linux поддерживает запуск в паравиртуальном режиме без перекомпиляции со сторонними патчами.\r\nПреимущество режима паравиртуализации состоит в том, что он не требует поддержки аппаратной виртуализации со стороны процессора, а также не тратит вычислительные ресурсы для эмуляции оборудования на шине PCI.\r\n\r\nРежим аппаратной виртуализации (HVM), который появился в Xen, начиная с версии 3.0 гипервизора требует поддержки со стороны оборудования.\r\nВ этом режиме для эмуляции виртуальных устройств используется QEMU, который весьма медлителен несмотря на паравиртуальные драйвера.\r\nОднако со временем поддержка аппаратной виртуализации в оборудовании получила настолько широкое распространение, что используется даже в современных процессорах лэптопов.\r\n\r\n### Виртуализация уровня операционной системы\r\nВиртуализация уровня операционной системы отличается от других.\r\nОна использует технику, при которой сервера виртуализируются непосредственно над ОС.\r\nНедостатком метода является то, что поддерживается одна единственная операционная система на физическом сервере, которая изолирует контейнеры друг от друга.\r\nПреимуществом виртуализации уровня ОС является \"родная\" производительность.\r\n\r\n*Виртуализация уровня ОС изолирует серверы*\r\n![Схема виртуализации уровня ОС](https://raw.githubusercontent.com/Amet13/virtuozzo-tutorial/master/images/cont-virt.png)\r\n\r\nВиртуализация уровня ОС — метод виртуализации, при котором ядро операционной системы поддерживает несколько изолированных экземпляров пространства пользователя вместо одного.\r\nС точки зрения пользователя эти экземпляры полностью идентичны реальному серверу.\r\nДля систем на базе UNIX эта технология может рассматриваться как улучшенная реализация механизма chroot.\r\nЯдро обеспечивает полную изолированность контейнеров, поэтому программы из разных контейнеров не могут воздействовать друг на друга.\r\n\r\n### Virtuozzo — объединение технологий виртуализации уровня ОС и полной виртуализации\r\nVirtuozzo позволяет создавать множество защищенных, изолированных друг от друга контейнеров на одном узле.\r\nПомимо этого возможно создание виртуальных машин на базе QEMU/KVM.\r\nУправление контейнерами и виртуальными машинами происходит с помощью специализированных утилит.\r\n\r\nКаждый контейнер ведет себя так же, как автономный сервер и имеет собственные файлы, процессы, сеть (IP адреса, правила маршрутизации).\r\nВ отличие от KVM или Xen, Virtuozzo использует одно ядро, которое является общим для всех виртуальных сред.\r\n\r\nКонтейнеры можно разделить на две составляющие:\r\n* ядро (namespaces, cgroups, CRIU, ploop, vcmmd...)\r\n* пользовательские утилиты (prlctl, vzctl, vzpkg, vzlist, vzdump...)\r\n\r\nNamespaces — пространства имен.\r\nЭто механизм ядра, который позволяет изолировать процессы друг от друга. Изоляция может быть выполнена в шести контекстах (пространствах имен):\r\n* mount — предоставляет процессам собственную иерархию файловой системы и изолирует ее от других таких же иерархий по аналогии с chroot\r\n* PID — изолирует идентификаторы процессов (PID) одного пространства имен от процессов с такими же идентификаторами другого пространства\r\n* network — предоставляет отдельным процессам логически изолированный от других стек сетевых протоколов, сетевой интерфейс, IP-адрес, таблицу маршрутизации, ARP и прочие реквизиты\r\n* IPC — обеспечивает разделяемую память и взаимодействие между процессами\r\n* UTS — изоляция идентификаторов узла, таких как имя хоста (hostname) и домена (domain)\r\n* user — позволяет иметь один и тот же набор пользователей и групп в рамках разных пространств имен, в каждом контейнере могут быть свой\r\nroot и любые другие пользователи и группы\r\n\r\nCGroups (Control Groups) — позволяет ограничить аппаратные ресурсы некоторого набора процессов.\r\nПод аппаратными ресурсами подразумеваются: процессорное время, память, дисковая и сетевая подсистемы.\r\nНабор или группа процессов могут быть определены различными критериями.\r\nНапример, это может быть целая иерархия процессов, получающая все лимиты родительского процесса.\r\nКроме этого возможен подсчет расходуемых группой ресурсов, заморозка (freezing) групп, создание контрольных точек (checkpointing) и их перезагрузка.\r\nДля управления этим полезным механизмом существует специальная библиотека libcgroups, в состав которой входят такие утилиты, как cgcreate, cgexec и некоторые другие.\r\n\r\nCRIU (Checkpoint/Restore In Userspace) — обеспечивает создание контрольной точки для произвольного приложения, а также возобновления работы приложения с этой точки.\r\nОсновной целью CRIU является поддержка миграции контейнеров.\r\nУже поддерживаются такие объекты как процессы, память приложений, открытые файлы, конвейеры, IPC сокеты, TCP/IP и UDP сокеты, таймеры, сигналы, терминалы, файловые дескрипторы.\r\nВ разработке также находится миграция TCP соединений.\r\n\r\nvcmmd (Virtuozzo containers memory management daemon) — сервис управления механизмом memory cgroups в пространстве пользователя.\r\nМенеджер памяти 4 поколения управляет memory cgroups.\r\nmemory cgroups присутстсвует в ванильном ядре, поэтому не требует сторонних патчей со стороны Virtuozzo.\r\n\r\nПроведенные тестирования показывают, что OpenVZ (ныне Virtuozzo) является одним из наиболее актуальных решений на рынке виртуализации, так как показывает внушительные результаты в различных тестированиях.\r\n\r\n*График времени отклика системы*\r\n![Время отклика системы](https://raw.githubusercontent.com/Amet13/virtuozzo-tutorial/master/images/response-time.png)\r\n\r\nНа графике времени отклика системы можно наблюдать результаты трех тестов — с нагрузкой на систему и виртуальную машину, без нагрузки на систему и ВМ, с нагрузкой на ВМ и без нагрузки на систему.\r\nВо всех тестах OpenVZ показал результаты наименьшего времени отклика, в то время, когда ESXi и Hyper-V показывают оверхед 700-3000%, когда у OpenVZ всего 1-3%.\r\n\r\n*График пропускной способности сети*\r\n![Пропускная способность сети](https://raw.githubusercontent.com/Amet13/virtuozzo-tutorial/master/images/network.png)\r\n\r\nНа втором графике — результаты тестирования пропускной способности сети.\r\nНа графике можно наблюдать, что OpenVZ обеспечивает практическую нативную пропускную способность 10Gb сети (9.7Gb отправка и 9.87Gb прием).\r\n\r\n## Краткая история проекта Virtuozzo\r\nВ 1999 году возникла идея создания Linux контейнеров, а уже в 2002 году компания SWsoft представила первый релиз коммерческой версии Virtuozzo. В том же 2002 году появились первые клиенты в Кремниевой долине.\r\n\r\nВ 2004 году выпуск Virtuozzo для Windows.\r\nВ 2005 году было принято решение о разделении Virtuozzo на два отдельных проекта, свободный OpenVZ (под лицензией GNU GPL) и проприетарный Virtuozzo.\r\n\r\nВ 2006 году OpenVZ стал доступен для Debian Linux, переход к ядру RHEL4.\r\nВ 2007 году портирован на RHEL5.\r\n\r\nВ 2011 году появилась идея создания проекта CRIU, OpenVZ портирован на RHEL6.\r\nВ 2012 году стала доступна CRIU v0.1.\r\n\r\nВ конце 2014 года компания Odin анонсировала открытие кодовой базы Parallels Cloud Server и объединение ее с открытым OpenVZ.\r\n\r\nВ апреле 2015 года был открыт репозиторий с ядром RHEL7 (3.10), в мае были открыты исходные коды пользовательских утилит, а в июне выложены тестовые сборки ISO-образов и RPM-пакеты.\r\n\r\n## Установка и подготовительные действия\r\nСуществует два способа установки Virtuozzo:\r\n* с помощью ISO-образа дистрибутива\r\n* с помощью установки пакетов и ядра на заранее установленный дистрибутив\r\n\r\n### Установка Virtuozzo с помощью ISO-образа (bare-metal installation)\r\nДистрибутив Virtuozzo основан на операционной системе [CloudLinux](https://www.cloudlinux.com/) с патчами для ядра RHEL7, утилитами управления и модифицированным установщиком.\r\nРекомендуется именно этот способ установки Virtuozzo.\r\n\r\nТекущая последняя версия ISO-образа доступна по адресу: https://download.openvz.org/virtuozzo/releases/7.0/x86_64/iso/\r\n\r\nПосле записи дистрибутива на носитель, можно приступать к настройке Virtuozzo.\r\nДля этого необходимо загрузиться с носителя.\r\n\r\n*Экран установки Virtuozzo после загрузки с носителя*\r\n![Экран установки Virtuozzo](https://raw.githubusercontent.com/Amet13/virtuozzo-tutorial/master/images/vz-install/install-vz.png)\r\n\r\nУстановка Virtuozzo ничем не отличается от установки обычного Linux-дистрибутива.\r\nУстановщик Anaconda предложит установить дату и время, раскладку клавиатуры, языковые параметры.\r\nТакже необходимо будет произвести разметку диска и настроить сеть.\r\nПо умолчанию включен kdump, который позволяет в будущем выяснить причины сбоев в ядре, поэтому рекомендуется его не отключать.\r\n\r\n*Экран установки параметров системы*\r\n![Настройки системы](https://raw.githubusercontent.com/Amet13/virtuozzo-tutorial/master/images/vz-install/anaconda.png)\r\n\r\n*Пример разметки для 20GB диска*\r\n![Разметка диска](https://raw.githubusercontent.com/Amet13/virtuozzo-tutorial/master/images/vz-install/partitioning.png)\r\n\r\nНеобходимо для раздела `/` выделить не менее 8GB доступного дискового пространства.\r\nРазмер раздела `swap` равен примерно половине объема оперативной памяти.\r\nВсе остальное дисковое пространство выделяется под раздел `/vz` с файловой системой ext4.\r\n\r\n*Настройки сетевого интерфейса и имени хоста*\r\n![Настройки сети](https://raw.githubusercontent.com/Amet13/virtuozzo-tutorial/master/images/vz-install/network.png)\r\n\r\nТакже необходимо задать пароль пользователя `root` и создать локального пользователя, например `vzuser`.\r\n\r\n*Установка пароля суперпользователя и создание локального пользователя*\r\n![Настройки пользователей](https://raw.githubusercontent.com/Amet13/virtuozzo-tutorial/master/images/vz-install/user.png)\r\n\r\nПосле установки необходимо перезагрузиться.\r\n\r\nНа этом установка Virtuozzo с помощью ISO-образа завершена.\r\n\r\n*Меню загрузчика Grub*\r\n![Grub](https://raw.githubusercontent.com/Amet13/virtuozzo-tutorial/master/images/vz-install/grub.png)\r\n\r\nПервый вход в систему осуществляется от пользователя `vzuser`, по SSH.\r\n\r\nПример получения прав суперпользователя на сервере:\r\n```\r\namet13@mint-17 ~ $ ssh vzuser@192.168.0.150\r\nvzuser@192.168.0.150's password: пароль_пользователя_vzuser\r\n[vzuser@virtuozzo ~]$ su -\r\nPassword: пароль_пользователя_root\r\n[root@virtuozzo ~]#\r\n```\r\n\r\n### Установка Virtuozzo на заранее установленный дистрибутив\r\n\r\nПоддерживаемые дистрибутивы:\r\n* CloudLinux 7\r\n* CentOS 7\r\n* Scientific Linux 7\r\n* прочие дистрибутивы, основанные на RHEL7\r\n\r\nУстановка пакетов на примере дистрибутива CentOS 7.\r\n\r\nПакет `virtuozzo-release` содержит метаинформацию и yum-репозитории, необходимые для установки пакетов:\r\n```\r\n[root@virtuozzo ~]# yum localinstall https://download.openvz.org/virtuozzo/releases/7.0/x86_64/os/Packages/v/virtuozzo-release-7.0.0-10.vz7.x86_64.rpm\r\n```\r\n\r\nУстановка необходимых RPM-пакетов:\r\n```\r\n[root@virtuozzo ~]# yum install prlctl prl-disp-service vzkernel ploop\r\n```\r\n\r\nВ качестве зависимостей также установятся такие пакеты как `criu`, `libvirt`, `lvm2`, `nfs-utils`, `quota`, `vcmmd`, `vzctl`, `vztt` и другие.\r\n\r\nПо окончании установки пакетов необходимо перезагрузиться:\r\n```\r\n[root@virtuozzo ~]# reboot\r\n```\r\n\r\nВ меню загрузчика должен появиться новый пункт `Virtuozzo 7`.\r\nНеобходимо загрузиться с этого ядра.\r\n\r\n*Меню загрузчика Grub после установки Virtuozzo*\r\n![Grub](https://raw.githubusercontent.com/Amet13/virtuozzo-tutorial/master/images/vz-install/grub-vz.png)\r\n\r\n### Подготовительные действия\r\nНа сервере важно всегда обновлять программное обеспечение, так как в новых версиях не только могут добавлять новые возможности, но и исправлять уязвимости.\r\nУказанная ниже команда обновляет все существующие в системе пакеты:\r\n```\r\n[root@virtuozzo ~]# yum update\r\n```\r\nДля сервера очень важно, чтобы было установлено правильное время.\r\nЧтобы синхронизировать время с интернетом необходимо установить пакет `ntp`.\r\n\r\nУстановка корректной временной зоны:\r\n```\r\n[root@virtuozzo ~]# timedatectl set-timezone Europe/Moscow\r\n[root@virtuozzo ~]# date\r\nTue Aug  4 14:52:54 MSK 2015\r\n```\r\nУстановка `ntp` и синхронизация времени с удаленными серверами:\r\n```\r\n[root@virtuozzo ~]# yum install ntp\r\n[root@virtuozzo ~]# systemctl start ntpd\r\n[root@virtuozzo ~]# systemctl enable ntpd\r\n[root@virtuozzo ~]# ntpdate -q  0.pool.ntp.org  1.pool.ntp.org\r\nserver 91.236.251.5, stratum 2, offset 0.002229, delay 0.05281\r\nserver 82.193.117.90, stratum 1, offset -0.020269, delay 0.04845\r\nserver 78.26.196.124, stratum 2, offset 0.003866, delay 0.05913\r\nserver 217.175.0.36, stratum 3, offset -0.003749, delay 0.06514\r\nserver 79.142.192.4, stratum 2, offset 0.006668, delay 0.05772\r\nserver 195.138.69.242, stratum 2, offset 0.005080, delay 0.05731\r\nserver 91.236.251.12, stratum 2, offset 0.002247, delay 0.05368\r\nserver 91.198.10.20, stratum 2, offset 0.003745, delay 0.05481\r\n 4 Aug 14:54:56 ntpdate[2804]: adjust time server 91.236.251.5 offset 0.002229 sec\r\n```\r\n\r\n## Управление шаблонами гостевых ОС\r\nНа данный момент Virtuozzo поддерживает такие гостевые ОС:\r\n* CentOS 7 (x86_64)\r\n* CentOS 6 (x86_64)\r\n* Ubuntu 14.04 LTS (x86_64)\r\n* Debian 8 (x86_64)\r\n\r\nПросмотр списка уже имеющихся локальных шаблонов:\r\n```\r\n[root@virtuozzo ~]# vzpkg list -O --with-summary\r\ncentos-6-x86_64                    :Centos 6 (for AMD64/Intel EM64T) Virtuozzo Template\r\ncentos-5-x86                       :Centos 5 (for ix86) Virtuozzo Template\r\n```\r\n\r\nУстановка всех доступных шаблонов:\r\n```\r\n[root@virtuozzo ~]# vzpkg list --available --with-summary | xargs vzpkg install template\r\n```\r\n\r\nПосле этого можно увидеть список доступных локально шаблонов гостевых ОС:\r\n```\r\n[root@virtuozzo ~]# vzpkg list -O --with-summary\r\ncentos-6-x86_64                    :Centos 6 (for AMD64/Intel EM64T) Virtuozzo Template\r\ncentos-5-x86                       :Centos 5 (for ix86) Virtuozzo Template\r\ncentos-7-x86_64                    :Centos 7 (for AMD64/Intel EM64T) Virtuozzo Template\r\nubuntu-14.04-x86_64                :Ubuntu 14.04 (for AMD64/Intel EM64T) Virtuozzo Template\r\ndebian-8.0-x86_64                  :Debian 8.0 (for AMD64/Intel EM64T) Virtuozzo Template\r\n```\r\n\r\nОбновление кэша шаблонов:\r\n```\r\n[root@virtuozzo ~]# vzpkg update cache\r\n```\r\n\r\n## Создание и настройка контейнеров\r\n### Конфигурационные файлы\r\nВ старых версиях OpenVZ основным идентификатором контейнера является CTID, который вручную указывался при создании контейнера.\r\nСейчас в этом нет необходимости, на смену CTID пришел UUID, который создается автоматически.\r\nОднако существует возможность указания UUID вручную.\r\n\r\nКаждый контейнер имеет свой конфигурационный файл, который хранится в каталоге `/etc/vz/conf/`.\r\nИменуются конфиги по UUID контейнера.\r\nНапример, для контейнера с `UUID = {3d32522a-80af-4773-b9fa-ea4915dee4b3}`, конфиг будет называться `3d32522a-80af-4773-b9fa-ea4915dee4b3.conf`.\r\n\r\nПри создании контейнера можно использовать типовую конфигурацию.\r\nТиповые файлы конфигураций находятся в том же каталоге `/etc/vz/conf/`:\r\n```\r\n[root@virtuozzo ~]# ls /etc/vz/conf/ | grep sample\r\nve-basic.conf-sample\r\nve-confixx.conf-sample\r\nve-vswap.1024MB.conf-sample\r\nve-vswap.2048MB.conf-sample\r\nve-vswap.256MB.conf-sample\r\nve-vswap.512MB.conf-sample\r\nve-vswap.plesk.conf-sample\r\nvps.vzpkgtools.conf-sample\r\n```\r\n\r\nВ этих конфигурационных файлах описаны контрольные параметры ресурсов, выделенное дисковое пространство, оперативная память и т.д.\r\nНапример, при использовании конфига `ve-vswap.512MB.conf-sample`, создается контейнер с дисковым пространством 10GB, оперативной памятью 512MB и swap 512MB:\r\n```\r\n[root@virtuozzo ~]# grep \"DISKSPACE\\|PHYSPAGES\\|SWAPPAGES\\|DISKINODES\" /etc/vz/conf/ve-vswap.512MB.conf-sample\r\nPHYSPAGES=\"131072:131072\"\r\nSWAPPAGES=\"131072\"\r\nDISKSPACE=\"10485760:10485760\"\r\nDISKINODES=\"655360:655360\"\r\n```\r\n\r\nЭто удобно, так как существует возможность создавать свои конфигурационные файлы для различных вариаций контейнеров.\r\nCоздадим свой конфигурационный файл, на базе уже существующего `vswap.512MB`.\r\nИсправим в нем только значения `PHYSPAGES`, `SWAPPAGES`, `DISKSPACE`, `DISKINODES`:\r\n```\r\n[root@virtuozzo ~]# cp /etc/vz/conf/ve-vswap.512MB.conf-sample /etc/vz/conf/ve-vswap.1GB.conf-sample\r\n[root@virtuozzo ~]# vim /etc/vz/conf/ve-vswap.1GB.conf-sample\r\nPHYSPAGES=\"262144:262144\"\r\nSWAPPAGES=\"262144\"\r\nDISKSPACE=\"20971520:20971520\"\r\nDISKINODES=\"1310720:1310720\"\r\n```\r\nТаким образом, при использовании этого конфигурационного файла, будет создаваться контейнер, которому будет доступно 20GB выделенного дискового пространства, 1GB оперативной памяти и 1GB swap.\r\n\r\nУстановка конфигурационного файла шаблона на примере `vswap.1GB`:\r\n```\r\n[root@virtuozzo ~]# prlctl set first --applyconfig vswap.1GB\r\nThe CT has been successfully configured.\r\n```\r\n\r\n### Создание контейнера\r\nВ качестве параметра к идентификатору контейнера может использоваться любое имя:\r\n```\r\n[root@virtuozzo ~]# CT=first\r\n[root@virtuozzo ~]# prlctl create $CT --ostemplate debian-8.0-x86_64 --vmtype=ct\r\nCreating the Virtuozzo Container...\r\nThe Container has been successfully created.\r\n```\r\n\r\nТаким образом был создан контейнер с именем `first` на базе шаблона `debian-8.0-x86_64`.\r\n\r\nТеперь можно просмотреть список имеющихся в системе контейнеров:\r\n```\r\n[root@virtuozzo ~]# prlctl list -a\r\nUUID                                    STATUS       IP_ADDR         T  NAME\r\n{3d32522a-80af-4773-b9fa-ea4915dee4b3}  stopped      -               CT first\r\n```\r\n\r\nЕсли же при создании контейнера не указывать желаемый шаблон, то Virtuozzo будет использовать шаблон по умолчанию.\r\nКонфигурационный файл, в котором указаны директивы по умолчанию `/etc/vz/vz.conf`.\r\nПо умолчанию, используется шаблон `centos-6` и конфигурационный файл `basic`:\r\n```\r\n[root@virtuozzo ~]# grep \"CONFIGFILE\\|DEF_OSTEMPLATE\" /etc/vz/vz.conf\r\nCONFIGFILE=\"basic\"\r\nDEF_OSTEMPLATE=\".centos-6\"\r\n```\r\n\r\nЕсли планируется создание большого количества однотипных контейнеров, основываясь на одном и том же конфиге, то значения можно исправить на нужные.\r\n\r\n### Настройка контейнера\r\nКонтейнер создан, его можно запускать.\r\nНо перед первым запуском необходимо установить его IP адреса, hostname, указать DNS сервера и задать пароль суперпользователя.\r\n\r\nДобавление IP адресов:\r\n```\r\n[root@virtuozzo ~]# prlctl set first --ipadd 192.168.0.161/24\r\n[root@virtuozzo ~]# prlctl set first --ipadd fe80::20c:29ff:fe01:fb08\r\n```\r\n\r\nУстановка DNS сервера и hostname:\r\n```\r\n[root@virtuozzo ~]# prlctl set first --nameserver 192.168.0.1\r\n[root@virtuozzo ~]# prlctl set first --hostname first.virtuozzo.localhost\r\n```\r\n\r\nУстановка поискового домена (если требуется):\r\n```\r\n[root@virtuozzo ~]# prlctl set first --searchdomain 192.168.0.1\r\n```\r\n\r\nУстановка пароля суперпользователя:\r\n```\r\n[root@virtuozzo ~]# prlctl set first --userpasswd root:p0oT\r\n```\r\n\r\nПароль будет установлен в контейнер, в файл `/etc/shadow` и не будет сохранен в конфигурационный файл контейнера.\r\nЕсли же пароль будет утерян или забыт, то можно будет просто задать новый.\r\n\r\nДля запуска контейнера при старте хост-ноды добавляем:\r\n```\r\n[root@virtuozzo ~]# prlctl set first --onboot yes\r\n```\r\n\r\n### Запуск и вход\r\nПосле настроек нового контейнера. его можно запустить:\r\n```\r\n[root@virtuozzo ~]# prlctl start first\r\nStarting the CT...\r\nThe CT has been successfully started.\r\n```\r\n\r\nПроверяем сетевые интерфейсы внутри гостевой ОС:\r\n```\r\n[root@virtuozzo ~]# prlctl exec first ifconfig | grep \"lo\\|venet\" -A 1\r\nlo        Link encap:Local Loopback\r\n          inet addr:127.0.0.1  Mask:255.0.0.0\r\n--\r\nvenet0    Link encap:UNSPEC  HWaddr 00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00\r\n          inet addr:127.0.0.1  P-t-P:127.0.0.1  Bcast:0.0.0.0  Mask:255.255.255.255\r\n--\r\nvenet0:0  Link encap:UNSPEC  HWaddr 00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00\r\n          inet addr:192.168.0.161  P-t-P:192.168.0.161  Bcast:192.168.0.255  Mask:255.255.255.0\r\n```\r\n\r\nТакже проверим корректность hostname:\r\n```\r\n[root@virtuozzo ~]# prlctl exec first hostname\r\nfirst.virtuozzo.localhost\r\n```\r\n\r\nПроверяем доступность контейнера в сети и корректность пароля суперпользователя:\r\n```\r\n[root@virtuozzo ~]# ssh root@192.168.0.161\r\nroot@192.168.0.161's password: p0oT\r\nroot@first:~#\r\n```\r\n\r\nВход в контейнер напрямую с хост-ноды:\r\n```\r\n[root@virtuozzo ~]# prlctl enter first\r\nentered into CT\r\nroot@first:/#\r\n```\r\n\r\nВыход из контейнера:\r\n```\r\nroot@first:/# exit\r\nlogout\r\n[root@virtuozzo ~]#\r\n```\r\n\r\n## Управление контейнерами\r\n### Управление состоянием контейнера\r\nСтатус контейнера:\r\n```\r\n[root@virtuozzo ~]# prlctl status first\r\nCT first exist running\r\n[root@virtuozzo ~]# prlctl status second\r\nCT second exist stopped\r\n```\r\n\r\nПо выводу команды можно наблюдать, что контейнер `first` существует и запущен, а контейнер `second` существует и остановлен.\r\n\r\nОстановка контейнера:\r\n```\r\n[root@virtuozzo ~]# prlctl stop first\r\nStopping the CT...\r\nThe CT has been successfully stopped.\r\n```\r\n\r\nИногда нужно выключить контейнер как можно быстрее, например если контейнер был подвержен взлому.\r\nДля того чтобы срочно выключить контейнер, нужно использовать ключ `--kill`:\r\n```\r\n[root@virtuozzo ~]# prlctl stop first --kill\r\nStopping the CT...\r\nThe CT has been forcibly stopped\r\n```\r\n\r\nПерезапуск контейнера:\r\n```\r\n[root@virtuozzo ~]# prlctl restart first\r\nRestarting the CT...\r\nThe CT has been successfully restarted.\r\n```\r\n\r\nДля удаление контейнера, его нужно сначала остановить:\r\n```\r\n[root@virtuozzo ~]# prlctl stop\r\nStopping the CT...\r\nThe CT has been successfully stopped.\r\n[root@virtuozzo ~]# prlctl delete first\r\nRemoving the CT...\r\nThe CT has been successfully removed.\r\n```\r\n\r\nКоманда выполняет удаление частной области сервера и переименовывает файл конфигурации, дописывая к нему `.destroyed`.\r\n\r\n### Клонирование контейнера\r\nVirtuozzo позволяет клонировать контейнеры:\r\n```\r\n[root@virtuozzo ~]# prlctl clone first --name second\r\nClone the first CT to CT second...\r\nThe CT has been successfully cloned.\r\n[root@virtuozzo ~]# prlctl list -a\r\nUUID                                    STATUS       IP_ADDR         T  NAME\r\n{3d32522a-80af-4773-b9fa-ea4915dee4b3}  running      192.168.0.161   CT first\r\n{54bc2ba6-b040-469e-9fda-b0eabda822d4}  stopped      192.168.0.161   CT second\r\n```\r\n\r\nПри клонировании контейнера необходимо помнить о смене IP адреса, иначе при попытке запуска будет наблюдаться ошибка:\r\n```\r\n[root@virtuozzo ~]# prlctl start second\r\nStarting the CT...\r\nFailed to start the CT: PRL_ERR_VZCTL_OPERATION_FAILED\r\n```\r\n\r\nСначала нужно удалить старые IP адреса:\r\n```\r\n[root@virtuozzo ~]# prlctl set second --ipdel 192.168.0.161/24\r\n[root@virtuozzo ~]# prlctl set second --ipdel fe80::20c:29ff:fe01:fb08\r\n```\r\n\r\nЗатем добавить новые:\r\n```\r\n[root@virtuozzo ~]# prlctl set second --ipadd 192.168.0.162/24\r\n[root@virtuozzo ~]# prlctl set second --ipadd fe80::20c:29ff:fe01:fb09\r\n```\r\nСмена hostname:\r\n```\r\n[root@virtuozzo ~]# prlctl set second --hostname second.virtuozzo.localhost\r\nThe CT has been successfully configured.\r\n```\r\n\r\nПосле этого контейнер можно запустить:\r\n```\r\n[root@virtuozzo ~]# prlctl start second\r\nStarting the CT...\r\nThe CT has been successfully started.\r\n```\r\n\r\n### Запуск команд в контейнере с хост-ноды\r\nПример запуска команды в контейнере:\r\n```\r\n[root@virtuozzo ~]# prlctl exec first cat /etc/issue\r\nDebian GNU/Linux 8 \\n \\l\r\n```\r\n\r\nИногда бывает нужно выполнить команду на нескольких контейнерах.\r\nДля этого можно использовать команду:\r\n```\r\n[root@virtuozzo ~]# CMD=\"cat /etc/issue\"\r\n[root@virtuozzo ~]# for i in `prlctl list -o name -H`; do echo \"CT $i\"; prlctl exec $i $CMD; done\r\nCT first\r\nDebian GNU/Linux 8 \\n \\l\r\n\r\nCT second\r\nDebian GNU/Linux 8 \\n \\l\r\n```\r\n\r\n### Расширенная информация о контейнерах\r\nПодробная информация о контейнере:\r\n```\r\n[root@virtuozzo ~]# prlctl list -i first\r\nAutostop: suspend\r\nAutocompact: on\r\nUndo disks: off\r\nBoot order:\r\nEFI boot: off\r\nAllow select boot device: off\r\nExternal boot device:\r\nRemote display: mode=off address=0.0.0.0\r\nRemote display state: stopped\r\nHardware:\r\n  cpu cpus=unlimited VT-x accl=high mode=32 cpuunits=1000 ioprio=4\r\n  memory 512Mb\r\n  video 0Mb 3d acceleration=highest vertical sync=yes\r\n  memory_quota auto\r\n  hdd0 (+) image='/vz/private/3d32522a-80af-4773-b9fa-ea4915dee4b3/root.hdd' type='expanded' 10240Mb mnt=/\r\n  venet0 (+) type='routed' ips='192.168.0.161/255.255.255.0 FE80:0:0:0:20C:29FF:FE01:FB08/64 '\r\nHost Shared Folders: (-)\r\nFeatures:\r\nEncrypted: no\r\nFaster virtual machine: on\r\nAdaptive hypervisor: off\r\nDisabled Windows logo: on\r\nAuto compress virtual disks: on\r\nNested virtualization: off\r\nPMU virtualization: off\r\nOffline management: (-)\r\nHostname: first.virtuozzo.localhost\r\nDNS Servers: 192.168.0.1\r\n```\r\n\r\nСуществует также возможность просмотра дополнительной информации о контейнерах:\r\n```\r\n[root@virtuozzo ~]# prlctl list -o type,status,name,hostname,dist,ip\r\nT  STATUS       NAME                             HOSTNAME                         DIST            IP_ADDR\r\nCT running      second                           second.virtuozzo.localhost       debian          192.168.0.162 FE80:0:0:0:20C:29FF:FE01:FB09  \r\nCT running      first                            first.virtuozzo.localhost        debian          192.168.0.161 FE80:0:0:0:20C:29FF:FE01:FB08  \r\n```\r\n\r\nСписок всех доступных полей:\r\n```\r\n[root@virtuozzo ~]# prlctl list -L\r\nuuid                 UUID\r\nenvid                ENVID\r\nstatus               STATUS\r\nname                 NAME\r\ndist                 DIST\r\nowner                OWNER\r\nsystem-flags         SYSTEM_FLAGS\r\ndescription          DESCRIPTION\r\nnumproc              NPROC\r\nip                   IP_ADDR\r\nip_configured        IP_ADDR\r\nhostname             HOSTNAME\r\nnetif                NETIF\r\nmac                  MAC\r\nfeatures             FEATURES\r\nlocation             LOCATION\r\niolimit              IOLIMIT\r\nnetdev               NETDEV\r\ntype                 T\r\nha_enable            HA_ENABLE\r\nha_prio              HA_PRIO\r\n-                    -\r\n```\r\n\r\n## Управление ресурсами\r\nДоступные контейнеру ресурсы контролируются с помощью набора параметров управления ресурсами.\r\nВсе эти параметры можно редактировать в файлах шаблонов, в каталоге `/etc/vz/conf/`.\r\nИх можно установить вручную, редактируя соответствующие конфиги или используя утилиты Virtuozzo.\r\n\r\nПараметры контроля ресурсов условно разделяют на группы:\r\n* дисковые квоты\r\n* процессор\r\n* операции ввода/вывода\r\n* память\r\n* сеть\r\n\r\n### Дисковые квоты\r\nАдминистратор сервера Virtuozzo может устанавливать дисковые квоты, в терминах дискового пространства и количества inodes, число которых примерно равно количеству файлов.\r\nЭто первый уровень дисковой квоты.\r\nВ дополнение к этому, администратор может использовать обычные утилиты внутри окружения, для настроек стандартных дисковых квот UNIX для пользователей и групп.\r\n\r\nДля использования дисковых квот, соответствующая директива должна присутствовать в конфигурационном файле Virtuozzo:\r\n```\r\n[root@virtuozzo ~]# grep DISK_QUOTA /etc/vz/vz.conf\r\nDISK_QUOTA=yes\r\n```\r\n\r\nОсновные параметры:\r\n* `DISKSPACE` — общий размер дискового пространства (задается в Kb)\r\n* `DISKINODES` — общее число дисковых inodes\r\n* `QUOTATIME` — время (в секундах) на которое контейнер может превысить значение soft предела\r\n\r\nПараметры записываются в конфигурационный файл в виде:\r\n```\r\nCOMMAND=\"softlimit:hardlimit\"\r\n```\r\nгде:\r\n* `COMMAND` — команда (`DISKSPACE` или `DISKINODES`)\r\n* `softlimit` — значение которое превышать нежелательно, после пересечения этого предела наступает grace период, по истечении которого, дисковое пространство или inodes прекратят свое существование\r\n* `hardlimit` — значение которое превысить нельзя\r\n\r\nНапример, запись:\r\n```\r\nDISKSPACE=\"19922944:20971520\"\r\nDISKINODES=\"1300000:1310720\"\r\nQUOTATIME=\"600\"\r\n```\r\nозначает, что задается `softlimit` для дискового пространства равным ~19G и `hardlimit` равный 20G, то же самое с inodes 1300000 и 1310720 соответственно.\r\n\r\nЕсли размер занятого дискового пространства или inodes будет выше `softlimit`, то в течении 600 сек (10 мин), в случае не освобождения дискового пространства или inodes, они прекратят свое существование.\r\n\r\nАналогично, можно установить эти параметры с помощью `vzctl`:\r\n```\r\n[root@virtuozzo ~]# vzctl set first --diskspace 5G:6G --save\r\nResize the image /vz/private/3d32522a-80af-4773-b9fa-ea4915dee4b3/root.hdd to 6291456K\r\ndumpe2fs 1.42.9 (28-Dec-2013)\r\n[root@virtuozzo ~]# vzctl set first --diskinodes 10000:110000 --save\r\n```\r\n\r\n### Процессор\r\nПланировщик процессора в Virtuozzo также двухуровневый.\r\nНа первом уровне планировщик решает, какому контейнеру дать квант процессорного времени, базируясь на значении параметра `CPUUNITS` для контейнера.\r\nНа втором уровне стандартный планировщик GNU/Linux решает, какому процессу в выбранном контейнере дать квант времени, базируясь на стандартных приоритетах процесса.\r\n\r\nОсновными параметрами управления CPU являются:\r\n* `CPUUNITS` — гарантируемое минимальное количество времени процессора, которое получит соответствующий контейнер\r\n* `CPUMASK` — привязка контейнера к конкретным процессорам, по умолчанию нагрузка распределяется на все процессоры\r\n* `CPULIMIT` — верхний лимит процессорного времени в процентах\r\n* `CPUS` — количество используемых процессорных (ядер) контейнером\r\n* `NODEMASK` — привязка ядер NUMA-систем к контейнеру\r\n\r\nПараметр `CPUUNITS` указывает процессорное время доступное для контейнера.\r\nПо умолчанию для каждого контейнера это значение равно 1000.\r\nТо есть, если для контейнера `first` установить значение 2000, а для контейнера `second` оставить значение 1000, то при равных условиях контейнер `first` получит ровно в два раза больше процессорного времени.\r\n```\r\n[root@virtuozzo ~]# prlctl set first --cpuunits 2000\r\nset cpuunits 2000\r\n```\r\n\r\nЕсли система многопроцессорная, то установка параметра `CPUMASK` может пригодиться для привязки контейнера к конкретным процессорам.\r\nВ случае восьмипроцессорной системы можно привязать контейнер к процессорам 0-3, 6, 7:\r\n```\r\n[root@virtuozzo ~]# prlctl set first --cpumask 0-3,6,7\r\nset cpu mask 0-3,6,7\r\n```\r\n\r\nВерхний лимит процессорного времени, который задается параметром `CPULIMIT` является долей общей мощности процессора в процентах:\r\n```\r\n[root@virtuozzo ~]# prlctl set first --cpulimit 15\r\nset cpulimit 15%\r\n```\r\n\r\nСуществует также возможность задания `CPULIMIT` в абсолютных значениях (MHz):\r\n```\r\n[root@virtuozzo ~]# prlctl set first --cpulimit 600m\r\nset cpulimit 600Mhz\r\n```\r\n\r\nВ параметре `CPUS` задается число доступных для контейнера процессорных ядер.\r\nКонтейнер по умолчанию получает в использование все процессорные ядра:\r\n```\r\n[root@virtuozzo ~]# CPUINFO=\"grep processor /proc/cpuinfo\"\r\n[root@virtuozzo ~]# prlctl exec first $CPUINFO\r\nprocessor\t: 0\r\nprocessor\t: 1\r\nprocessor\t: 2\r\nprocessor\t: 3\r\n```\r\n\r\nУстановим для контейнера лимит в 2 процессорных ядра:\r\n```\r\n[root@virtuozzo ~]# prlctl set first --cpus 2\r\nset cpus(4): 2\r\n[root@virtuozzo ~]# prlctl exec first $CPUINFO\r\nprocessor\t: 0\r\nprocessor\t: 1\r\n```\r\n\r\nДля систем архитектуры NUMA существует возможность привязки контейнера к процессорам NUMA-нод:\r\n```\r\n[root@virtuozzo ~]# vzctl set first --nodemask 0 --save\r\n```\r\n\r\nАналогично все параметры можно вручную прописать в конфигурационный файл контейнера:\r\n```\r\nCPUUNITS=\"2000\"\r\nCPUMASK=\"0-3,6,7\"\r\nCPULIMIT=\"15\"\r\nCPULIMIT_MHZ=\"600\"\r\nCPUS=\"2\"\r\nNODEMASK=\"0\"\r\n```\r\n\r\nУтилиты контроля ресурсов процессора, гарантируют любому контейнеру количество времени центрального процессора, которое собственно и получает этот контейнер.\r\nПри этом контейнер может потреблять больше времени, чем определено этой величиной, если нет другого конкурирующего с ним за время CPU сервера.\r\n\r\n### Операции ввода/вывода\r\nВ Virtuozzo существует возможность управления дисковыми операциями ввода/вывода.\r\nМожно устанавливать значения таких параметров как:\r\n* `IOPRIO`\r\n* `IOLIMIT`\r\n* `IOPSLIMIT`\r\n\r\nПараметр `IOPRIO` указывает приоритет операция ввода вывода для контейнера.\r\nПо умолчанию для всех контейнеров установлен равный приоритет (значение 4).\r\n\r\nИзменение значения параметра можно регулировать от 0 (максимальный приоритет) до 7:\r\n```\r\n[root@virtuozzo ~]# prlctl set first --ioprio 6\r\nset ioprio 7\r\n```\r\n\r\nПараметр `IOLIMIT` позволяет ограничивать пропускную способность операций ввода/вывода.\r\nПо умолчанию параметр имеет значение 0, то есть отсутствие лимитов.\r\n\r\nУстановка значения в MB/s:\r\n```\r\n[root@virtuozzo ~]# prlctl set first --iolimit 20\r\nSet up iolimit: 20971520\r\n```\r\n\r\nСуществует возможность указания префиксов метрических значений:\r\n* `G` — гигабайт\r\n* `M` — мегабайт\r\n* `K` — килобайт\r\n* `B` — байт\r\n\r\nМаксимальная пропускная способность дисковых операций ввода/вывода составляет 2GB/s.\r\n\r\nПомимо ограничения пропускной способности операций ввода/вывода, существует возможность ограничения количества операций ввода/вывода в секунду.\r\n\r\nПараметр `IOPSLIMT` позволяет установить численное значение операций ввода/вывода в секунду, например 300:\r\n```\r\n[root@virtuozzo ~]# prlctl set first --iopslimit 300\r\nset IOPS limit 300\r\n```\r\n\r\nПо умолчанию значение этого параметра равно 0, что означает отсутствие лимитов.\r\n\r\nПараметры можно указать вручную в конфигурационном файле контейнера:\r\n```\r\nIOPRIO=\"7\"\r\nIOLIMIT=\"20971520\"\r\nIOPSLIMIT=\"300\"\r\n```\r\n\r\nПроверка ограничения пропускной способностей операций ввода/вывода на примере `IOLIMIT`.\r\n\r\nЗначение `IOLIMIT` равно 0:\r\n```\r\nroot@first:/# dd if=/dev/zero of=test bs=1048576 count=10\r\n10+0 records in\r\n10+0 records out\r\n10485760 bytes (10 MB) copied, 0.210523 s, 49.8 MB/s\r\n```\r\n\r\nЗначение `IOLIMIT` равно 500K:\r\n```\r\nroot@first:/# dd if=/dev/zero of=test bs=1048576 count=10\r\n10+0 records in\r\n10+0 records out\r\n10485760 bytes (10 MB) copied, 17.4388 s, 601 kB/s\r\n```\r\n\r\n### Память\r\nВ Virtuozzo используется управление памятью 4 поколения с помощью vcmmd.\r\nВ прошлом же использовалось управление памятью с помощью:\r\n* VSwap (третье поколение)\r\n* SLM (второе поколение)\r\n* User Beancounters (первое поколение)\r\n\r\nС пользовательской стороны управление памятью с помощью VSwap и vcmmd ничем не отличается, однако с точки зрения реализации, vcmmd уже находится в ванильном ядре и не требует патчей со стороны разработчиков Virtuozzo.\r\n\r\nОграничение физической памяти и swap задаются в конфигурационном файле контейнера параметрами `PHYSPAGES` и `SWAPPAGES`.\r\nЗначения устанавливаются в блоках, например:\r\n```\r\nPHYSPAGES=\"262144:262144\"\r\nSWAPPAGES=\"262144:262144\"\r\n```\r\nравняются значениям в 1024MB (262144 блок / 256 = 1024MB).\r\n\r\nС помощью `prlctl` значения параметров можно указывать в метрической системе:\r\n```\r\n[root@virtuozzo ~]# prlctl set first --memsize 1G --swappages 1G\r\nSet the memsize parameter to 1024Mb.\r\nSet swappages 262144\r\n```\r\n\r\nOvercommiting — возможность использования большего числа ресурсов, чем выдано контейнеру.\r\n\r\nЗначение `VM_OVERCOMMIT` указывает число, во сколько раз больше памяти сможет использовать контейнер в случае необходимости.\r\nПо умолчанию значение `VM_OVERCOMMIT` равно 1.5.\r\nТо есть для контейнера установлено, с 1024MB оперативной памяти и 1024MB swap, суммарно доступно 2048MB памяти, в случае необходимости контейнер cможет использовать (2048MB * 1.5 = 3072MB) памяти.\r\n\r\nДля изменения значения достаточно прописать параметр в конфигурационный файл контейнера и перезапустить его:\r\n```\r\nVM_OVERCOMMIT=\"2\"\r\n```\r\n\r\nТакже возможна установка параметра с помощью `vzctl`:\r\n```\r\n[root@virtuozzo ~]# vzctl set first --vm_overcommit 2 --save\r\n```\r\n\r\nПри использовании значения 2 для ранее упомянутого контейнера с 2048MB памяти, будет доступно (2048MB * 2 = 4096MB) памяти.\r\nЕстественно, если если эти ресурсы доступны на хост-ноде.\r\n\r\n### Мониторинг ресурсов\r\nС помощью утилиты `vznetstat` можно увидеть входящий и исходящий трафик (в байтах и пакетах) для всех контейнеров:\r\n```\r\n[root@virtuozzo ~]# vznetstat\r\nUUID                                 Net.Class     Input(bytes) Input(pkts)        Output(bytes) Output(pkts)\r\n0                                    0                244486        3024              1567749        2491\r\n54bc2ba6-b040-469e-9fda-b0eabda822d4 0                     0           0                    0           0\r\n4730cba8-deed-4168-9f9e-34373e618026 0                     0           0                    0           0\r\n3d32522a-80af-4773-b9fa-ea4915dee4b3 0               2925512       49396             49398885       49254\r\n```\r\n\r\nДля конкретного контейнера можно воспользоваться ключом `-v`:\r\n```\r\n[root@virtuozzo ~]# vznetstat -v 3d32522a-80af-4773-b9fa-ea4915dee4b3\r\nUUID                                 Net.Class     Input(bytes) Input(pkts)        Output(bytes) Output(pkts)\r\n3d32522a-80af-4773-b9fa-ea4915dee4b3 0               2925512       49396             49398885       49254\r\n```\r\n\r\nУтилита `vzstat` позволяет узнать информацию по нагрузке на контейнер, занятым ресурсам и состоянии сети:\r\n```\r\n[root@virtuozzo ~]# vzstat -p 3d32522a-80af-4773-b9fa-ea4915dee4b3 -t\r\nloadavg\t\t0 0 0\r\nCTNum\t\t3\r\nprocs\t\t289 1 288 0 0 0 0\r\nCPU\t\t16 0 2 3 95\r\nsched latency\t372 9\r\nMem\t\t989 360 0\r\nMem latency\t1 0\r\n  ZONE0 (DMA): size 15MB, act 4MB, inact 4MB, free 4MB (0/0/1)\r\n  ZONE1 (DMA32): size 1007MB, act 243MB, inact 274MB, free 355MB (43/54/64)\r\n  Mem lat (ms): A0 1, K0 0, U0 1, K1 0, U1 0\r\n  Slab pages: 62MB/62MB (ino 22MB, de 0MB, bh 1MB, pb 0MB)\r\nSwap\t\t952 952 0.000 0.000\r\nNet stats\t0.382 5949 5.542 5820\r\nif br0 stats\t0.171 2975 2.771 2910\r\nif lo stats\t0.000 0 0.000 0\r\nif virbr1-nic stats\t0.000 0 0.000 0\r\nif enp0s3 stats\t0.211 2975 2.771 2910\r\nif virbr1 stats\t0.000 0 0.000 0\r\nDisks stats\t0.000 0.000\r\n\r\n    CTID ST   %VM    %KM        PROC     CPU     SOCK FCNT MLAT IP\r\n```\r\n\r\n`vzpid` позволяет узнать к какому контейнеру принадлежит процесс, это может быть полезно при просмотре списка процессов с хост-ноды и поиска \"процесса-грузчика\":\r\n```\r\n[root@virtuozzo ~]# top\r\ntop - 20:43:26 up 33 min,  1 user,  load average: 0.00, 0.01, 0.05\r\nTasks: 178 total,   1 running, 176 sleeping,   1 stopped,   0 zombie\r\n%Cpu(s):  1.7 us,  3.6 sy,  0.0 ni, 88.5 id,  0.0 wa,  0.0 hi,  6.2 si,  0.0 st\r\nKiB Mem :  1013704 total,   382912 free,   138656 used,   492136 buff/cache\r\nKiB Swap:   975868 total,   975868 free,        0 used.   688028 avail Mem\r\n\r\n    PID USER      PR  NI    VIRT    RES    SHR S  %CPU %MEM     TIME+ COMMAND\r\n   5625 33        20   0  364432   6232   1284 S  26.2  0.6   0:03.20 apache2\r\n...\r\n[root@virtuozzo ~]# vzpid 5625\r\nPid\tVEID\tName\r\n5625\t3d32522a-80af-4773-b9fa-ea4915dee4b3\tapache2\r\n```\r\n\r\nУтилита `vzps` аналогична утилите `ps`, она позволяет вывести список процессов и их состояние для конкретного контейнера:\r\n```\r\n[root@virtuozzo ~]# vzps aufx -E 3d32522a-80af-4773-b9fa-ea4915dee4b3\r\n    USER     PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND\r\n       0    2432  0.0  0.0      0     0 ?        S    20:10   0:00 [kthreadd/3d3252]\r\n       0    2433  0.0  0.0      0     0 ?        S    20:10   0:00  \\_ [khelper]\r\n       0    2420  0.0  0.3  28168  3136 ?        Ss   20:10   0:00 init -z\r\n     101    3088  0.0  0.1  26168  1448 ?        Ss   20:10   0:00  \\_ /lib/systemd/systemd-networkd\r\n       0    3117  0.0  0.1  28856  1620 ?        Ss   20:10   0:00  \\_ /lib/systemd/systemd-journald\r\n       0    3135  0.0  0.1  38916  1624 ?        Ss   20:10   0:00  \\_ /lib/systemd/systemd-udevd\r\n       0    3376  0.0  0.3  55156  3128 ?        Ss   20:10   0:00  \\_ /usr/sbin/sshd -D\r\n     102    3380  0.0  0.1  25732  1092 ?        Ss   20:10   0:00  \\_ /lib/systemd/systemd-resolved\r\n       0    3382  0.0  0.1  25884  1120 ?        Ss   20:10   0:00  \\_ /usr/sbin/cron -f\r\n       0    3388  0.0  0.1 182848  1884 ?        Ssl  20:10   0:00  \\_ /usr/sbin/rsyslogd -n\r\n       0    3433  0.0  0.0  12648   840 ?        Ss+  20:10   0:00  \\_ /sbin/agetty --noclear tty2 linux\r\n       0    3434  0.0  0.0  12648   840 ?        Ss+  20:10   0:00  \\_ /sbin/agetty --noclear --keep-baud console 115200 38400 9600 linux\r\n       0    3508  0.0  0.0  20200   956 ?        Ss   20:10   0:00  \\_ /usr/sbin/xinetd -pidfile /run/xinetd.pid -stayalive -inetd_compat -inetd_ipv6\r\n       0    3617  0.0  0.1  65452  1164 ?        Ss   20:10   0:00  \\_ /usr/sbin/saslauthd -a pam -c -m /var/run/saslauthd -n 2\r\n       0    3625  0.0  0.0  65452   836 ?        S    20:10   0:00  |   \\_ /usr/sbin/saslauthd -a pam -c -m /var/run/saslauthd -n 2\r\n       0    3755  0.0  0.2  73496  2724 ?        Ss   20:10   0:00  \\_ /usr/sbin/apache2 -k start\r\n      33    5747  0.2  0.5 363364  5300 ?        Sl   20:46   0:00  |   \\_ /usr/sbin/apache2 -k start\r\n       0    4074  0.0  0.2  36144  2388 ?        Ss   20:10   0:00  \\_ /usr/lib/postfix/master\r\n     105    4081  0.0  0.2  38208  2316 ?        S    20:10   0:00      \\_ pickup -l -t unix -u -c\r\n     105    4082  0.0  0.2  38256  2336 ?        S    20:10   0:00      \\_ qmgr -l -t unix -u\r\n\r\n```\r\n\r\nДля утилиты `top` также существует аналог `vztop`.\r\nПример просмотра списка процессов отсортированных по нагрузке на процессор для контейнера `first`:\r\n```\r\n[root@virtuozzo ~]# vztop -E 3d32522a-80af-4773-b9fa-ea4915dee4b3 -o %CPU -b\r\nvztop - 21:13:45 up  1:03,  1 user,  load average: 0.01, 0.04, 0.32\r\nTasks:  20 total,   0 running,  20 sleeping,   0 stopped,   0 zombie\r\n%Cpu(s):  0.3 us,  0.7 sy,  0.0 ni, 98.5 id,  0.1 wa,  0.0 hi,  0.5 si,  0.0 st\r\nKiB Mem :  1013704 total,   378752 free,   136600 used,   498352 buff/cache\r\nKiB Swap:   975868 total,   975868 free,        0 used.   691636 avail Mem\r\n\r\n                                    CTID     PID USER      PR  NI    VIRT    RES    SHR S  %CPU %MEM     TIME+ COMMAND\r\n    3d32522a-80af-4773-b9fa-ea4915dee4b3    5747 33        20   0  364424   6304   1280 S  40.0  0.6   0:03.37 apache2\r\n    3d32522a-80af-4773-b9fa-ea4915dee4b3    2420 root      20   0   28168   3136   1908 S   0.0  0.3   0:00.32 systemd\r\n    3d32522a-80af-4773-b9fa-ea4915dee4b3    2432 root      20   0       0      0      0 S   0.0  0.0   0:00.00 kthreadd/3d3252\r\n    3d32522a-80af-4773-b9fa-ea4915dee4b3    2433 root      20   0       0      0      0 S   0.0  0.0   0:00.00 khelper\r\n    3d32522a-80af-4773-b9fa-ea4915dee4b3    3088 101       20   0   26168   1448   1204 S   0.0  0.1   0:00.06 systemd-network\r\n    3d32522a-80af-4773-b9fa-ea4915dee4b3    3117 root      20   0   28856   1620   1356 S   0.0  0.2   0:00.12 systemd-journal\r\n    3d32522a-80af-4773-b9fa-ea4915dee4b3    3135 root      20   0   38916   1624   1132 S   0.0  0.2   0:00.04 systemd-udevd\r\n    3d32522a-80af-4773-b9fa-ea4915dee4b3    3376 root      20   0   55156   3128   2460 S   0.0  0.3   0:00.01 sshd\r\n    3d32522a-80af-4773-b9fa-ea4915dee4b3    3380 102       20   0   25732   1092    896 S   0.0  0.1   0:00.00 systemd-resolve\r\n    3d32522a-80af-4773-b9fa-ea4915dee4b3    3382 root      20   0   25884   1120    900 S   0.0  0.1   0:00.01 cron\r\n    3d32522a-80af-4773-b9fa-ea4915dee4b3    3388 root      20   0  182848   1884   1412 S   0.0  0.2   0:00.02 rsyslogd\r\n    3d32522a-80af-4773-b9fa-ea4915dee4b3    3433 root      20   0   12648    840    692 S   0.0  0.1   0:00.00 agetty\r\n    3d32522a-80af-4773-b9fa-ea4915dee4b3    3434 root      20   0   12648    840    692 S   0.0  0.1   0:00.00 agetty\r\n    3d32522a-80af-4773-b9fa-ea4915dee4b3    3508 root      20   0   20200    956    756 S   0.0  0.1   0:00.00 xinetd\r\n    3d32522a-80af-4773-b9fa-ea4915dee4b3    3617 root      20   0   65452   1164    328 S   0.0  0.1   0:00.00 saslauthd\r\n    3d32522a-80af-4773-b9fa-ea4915dee4b3    3625 root      20   0   65452    836      0 S   0.0  0.1   0:00.00 saslauthd\r\n    3d32522a-80af-4773-b9fa-ea4915dee4b3    3755 root      20   0   73496   2724   1512 S   0.0  0.3   0:00.58 apache2\r\n    3d32522a-80af-4773-b9fa-ea4915dee4b3    4074 root      20   0   36144   2388   1848 S   0.0  0.2   0:00.06 master\r\n    3d32522a-80af-4773-b9fa-ea4915dee4b3    4081 105       20   0   38208   2316   1776 S   0.0  0.2   0:00.04 pickup\r\n    3d32522a-80af-4773-b9fa-ea4915dee4b3    4082 105       20   0   38256   2336   1792 S   0.0  0.2   0:00.02 qmgr\r\n```\r\n\r\n## Ссылки\r\n* https://openvz.org/History\r\n* https://openvz.org/Quick_installation\r\n* https://openvz.org/OpenVZ_with_upstream_kernel\r\n* https://openvz.org/Packages\r\n* https://openvz.org/Roadmap\r\n* https://openvz.org/Category:HOWTO\r\n* http://docs.openvz.org/virtuozzo_7_users_guide.webhelp/\r\n\r\n## Лицензия\r\n![CC BY-SA 4.0](https://licensebuttons.net/l/by-sa/4.0/88x31.png)\r\n\r\n[Attribution-ShareAlike 4.0 International (CC BY-SA 4.0)](https://creativecommons.org/licenses/by-sa/4.0/deed.ru)\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}
{"name":"Руководство по созданию и управлению контейнерами на базе Virtuozzo","tagline":"","body":"<!--\r\n## Определения\r\nСнапшот (англ. snapshot) — снимок состояния виртуальной машины (ВМ) в определенный момент времени. Сюда входят настройки ВМ, содержимое памяти и дисков\r\n\r\nТонкий клиент (англ. thin client) — бездисковый компьютер-клиент в сетях с клиент-серверной или терминальной архитектурой, который переносит все или большую часть задач по обработке информации на сервер\r\n\r\nГипервизор (англ. hypervisor) — программа или аппаратная схема, позволяющая одновременное, параллельное выполнение нескольких ОС на одном и том же компьютере, обеспечивает изоляцию операционных систем друг от друга\r\n\r\nКонтейнер или VPS/VDS (англ. Virtual Private/Dedicated Server) — виртуальный выделенный сервер, эмулирует работу физического сервера\r\n\r\nОверхед (англ. overhead) — неизбежные накладные расходы\r\n-->\r\n\r\n## Содержание\r\n1. [Введение в виртуализацию](#Введение-в-виртуализацию)\r\n  - [Эмуляция оборудования](#Эмуляция-оборудования)\r\n  - [Полная виртуализация](#Полная-виртуализация)\r\n  - [Паравиртуализация](#Паравиртуализация)\r\n  - [Виртуализация уровня операционной системы](#Виртуализация-уровня-операционной-системы)\r\n  - [Virtuozzo — технология виртуализации уровня ОС](#virtuozzo--технология-виртуализации-уровня-ОС)\r\n2. [Краткая история проекта Virtuozzo](#Краткая-история-проекта-virtuozzo)\r\n3. [Лицензия](#Лицензия)\r\n\r\n## Введение в виртуализацию\r\nВиртуализация — предоставление наборов вычислительных ресурсов или их логического объединения, абстрагированное от аппаратной реализации, и обеспечивающее изоляцию вычислительных процессов.\r\n\r\nВиртуализацию можно использовать в:\r\n* консолидации серверов (позволяет мигрировать с физических серверов на виртуальные, тем самым увеличивается коэффициент использования аппаратуры, что позволяет существенно сэкономить на аппаратуре, электроэнергии и обслуживании)\r\n* разработке и тестировании приложений (возможность одновременно запускать несколько различных ОС, это удобно при разработке кроссплатформенного ПО, тем самым значительно повышается качество, скорость разработки и тестирования приложений)\r\n* бизнесе (использование виртуализации в бизнесе растет с каждым днем и постоянно находятся новые способы применения этой технологии, например, возможность безболезненно сделать снапшот)\r\n* организации виртуальных рабочих станций (так называемых \"тонких клиентов\")\r\n\r\n*Общая схема взаимодействия виртуализации с аппаратурой и программным обеспечением*\r\n![Общая схема взаимодействия виртуализации с аппаратурой и программным обеспечением](https://raw.githubusercontent.com/Amet13/virtuozzo-tutorial/master/images/virt-scheme.png)\r\n\r\nПонятие виртуализации можно условно разделить на две категории:\r\n* виртуализация платформ, продуктом этого вида виртуализации являются виртуальные машины\r\n* виртуализация ресурсов преследует целью комбинирование или упрощение представления аппаратных ресурсов для пользователя и получение неких пользовательских абстракций оборудования, пространств имен, сетей\r\n\r\nВзаимодействие приложений и операционной системы (ОС) с аппаратным обеспечением осуществляется через абстрагированный слой виртуализации.\r\n\r\nСуществует несколько подходов организации виртуализации:\r\n* эмуляция оборудования (QEMU, Bochs, Dynamips)\r\n* полная виртуализация (KVM, HyperV, VirtualBox)\r\n* паравиртуализация (Xen, L4, Trango)\r\n* виртуализация уровня ОС (LXC, Virtuozzo, Jails, Solaris Zones)\r\n\r\n### Эмуляция оборудования\r\nЭмуляция аппаратных средств является одним из самых сложных методов виртуализации.\r\nВ то же время главной проблемой при эмуляции аппаратных средств является низкая скорость работы, в связи с тем, что каждая команда моделируется на основных аппаратных средствах.\r\n\r\nВ эмуляции оборудования используется механизм динамической трансляции, то есть каждая из инструкций эмулируемой платформы заменяется на заранее подготовленный фрагмент инструкций физического процессора.\r\n\r\nОднако метод позволяет использовать виртуализированные аппаратные средства еще до выхода реальных.\r\nНапример, управление неизмененной ОС, предназначенной для PowerPC на системе с ARM процессором.\r\n\r\n*Эмуляция оборудования моделирует аппаратные средства*\r\n![Схема эмуляции оборудования](https://raw.githubusercontent.com/Amet13/virtuozzo-tutorial/master/images/emulation.png)\r\n\r\n### Полная виртуализация\r\nПолная виртуализация использует гипервизор, который осуществляет связь между гостевой ОС и аппаратными средствами физического сервера.\r\nВ связи с тем, что вся работа с гостевой операционной системой проходит через гипервизор, скорость работы данного типа виртуализации ниже чем в случае прямого взаимодействия с аппаратурой.\r\nОсновным преимуществом является то, что в ОС не вносятся никакие изменения, единственное ограничение — операционная система должна поддерживать основные аппаратные средства.\r\n\r\n*Полная виртуализация использует гипервизор*\r\n![Схема полной виртуализации](https://raw.githubusercontent.com/Amet13/virtuozzo-tutorial/master/images/full-virt.png)\r\n\r\nПолная виртуализация возможна исключительно при условии правильной комбинации оборудования и программного обеспечения.\r\n\r\n### Паравиртуализация\r\nПаравиртуализация имеет некоторые сходства с полной виртуализацией.\r\nЭтот метод использует гипервизор для разделения доступа к основным аппаратным средствам, но объединяет код, касающийся виртуализации, в непосредственно операционную систему, поэтому недостатком метода является то, что гостевая ОС должна быть изменена для гипервизора.\r\nНо паравиртуализация существенно быстрее полной виртуализации, скорость работы виртуальной машины приближена к скорости реальной, это осуществляется за счет отсутствия эмуляции аппаратуры и учета существования гипервизора при выполнении системных вызовов в коде ядра.\r\nВместо привилегированных операций совершаются гипервызовы обращения ядра гостевой ОС к гипервизору с просьбой о выполнении операции.\r\n\r\n*Паравиртуализация разделяет процесс с гостевой ОС*\r\n![Схема паравиртуализации](https://raw.githubusercontent.com/Amet13/virtuozzo-tutorial/master/images/paravirt.png)\r\n\r\nВ паравиртуальном режиме (PV) оборудование не эмулируется, и гостевая операционная система должна быть специальным образом модифицирована для работы в таком окружении.\r\nНачиная с версии 3.0, ядро Linux поддерживает запуск в паравиртуальном режиме без перекомпиляции со сторонними патчами.\r\nПреимущество режима паравиртуализации состоит в том, что он не требует поддержки аппаратной виртуализации со стороны процессора, а также не тратит вычислительные ресурсы для эмуляции оборудования на шине PCI.\r\n\r\nРежим аппаратной виртуализации (HVM), который появился в Xen, начиная с версии 3.0 гипервизора требует поддержки со стороны оборудования.\r\nВ этом режиме для эмуляции виртуальных устройств используется QEMU, который весьма медлителен несмотря на паравиртуальные драйвера.\r\nОднако со временем поддержка аппаратной виртуализации в оборудовании получила настолько широкое распространение, что используется даже в современных процессорах лэптопов.\r\n\r\n### Виртуализация уровня операционной системы\r\nВиртуализация уровня операционной системы отличается от других.\r\nОна использует технику, при которой сервера виртуализируются непосредственно над ОС.\r\nНедостатком метода является то, что поддерживается одна единственная операционная система на физическом сервере, которая изолирует контейнеры друг от друга.\r\nПреимуществом виртуализации уровня ОС является \"родная\" производительность.\r\n\r\n*Виртуализация уровня ОС изолирует серверы*\r\n![Схема виртуализации уровня ОС](https://raw.githubusercontent.com/Amet13/virtuozzo-tutorial/master/images/cont-virt.png)\r\n\r\nВиртуализация уровня ОС — метод виртуализации, при котором ядро операционной системы поддерживает несколько изолированных экземпляров пространства пользователя вместо одного.\r\nЭти экземпляры с точки зрения пользователя полностью идентичны реальному серверу.\r\nДля систем на базе UNIX эта технология может рассматриваться как улучшенная реализация механизма chroot.\r\nЯдро обеспечивает полную изолированность контейнеров, поэтому программы из разных контейнеров не могут воздействовать друг на друга.\r\n\r\n### Virtuozzo — технология виртуализации уровня ОС\r\nVirtuozzo позволяет создавать множество защищенных, изолированных друг от друга виртуальных сред (VE) на одном узле.\r\n\r\nКаждый контейнер ведет себя так же, как автономный сервер и имеет собственные файлы, процессы, сеть (IP адреса, правила маршрутизации).\r\nВ отличие от KVM или Xen, Virtuozzo использует одно ядро, которое является общим для всех виртуальных сред.\r\n\r\nКонтейнеры можно разделить на две составляющие:\r\n* ядро (namespaces, cgroups, CRIU)\r\n* пользовательские утилиты (prlctl, vzctl, vzquota, vzdump...)\r\n\r\nNamespaces — пространства имен.\r\nЭто механизм ядра, который позволяет изолировать процессы друг от друга. Изоляция может быть выполнена в шести контекстах (пространствах имен):\r\n* mount — предоставляет процессам собственную иерархию файловой системы и изолирует ее от других таких же иерархий по аналогии с chroot\r\n* PID — изолирует идентификаторы процессов (PID) одного пространства имен от процессов с такими же идентификаторами другого пространства\r\n* network — предоставляет отдельным процессам логически изолированный от других стек сетевых протоколов, сетевой интерфейс, IP-адрес, таблицу маршрутизации, ARP и прочие реквизиты\r\n* IPC — обеспечивает разделяемую память и взаимодействие между процессами\r\n* UTS — изоляция идентификаторов узла, таких как имя хоста (hostname) и домена (domain)\r\n* user — позволяет иметь один и тот же набор пользователей и групп в рамках разных пространств имен, в каждом контейнере могут быть свой\r\nroot и любые другие пользователи и группы\r\n\r\nCGroups (Control Groups) — позволяет ограничить аппаратные ресурсы некоторого набора процессов.\r\nПод аппаратными ресурсами подразумеваются: процессорное время, память, дисковая и сетевая подсистемы.\r\nНабор или группа процессов могут быть определены различными критериями.\r\nНапример, это может быть целая иерархия процессов, получающая все лимиты родительского процесса.\r\nКроме этого возможен подсчет расходуемых группой ресурсов, заморозка (freezing) групп, создание контрольных точек (checkpointing) и их перезагрузка.\r\nДля управления этим полезным механизмом существует специальная библиотека libcgroups, в состав которой входят такие утилиты, как cgcreate, cgexec и некоторые другие.\r\n\r\nCRIU (Checkpoint/Restore In Userspace) — обеспечивает создание контрольной точки для произвольного приложения, а также возобновения работы приложения с этой точки.\r\nОсновной целью CRIU является поддержка миграции контейнеров.\r\nУже поддерживаются такие объекты как процессы, память приложений, открытые файлы, конвейеры, IPC сокеты, TCP/IP и UDP сокеты, таймеры, сигналы, терминалы, файловые дескрипторы.\r\nВ разработке также находится миграция TCP соединений.\r\n\r\nПроведенные тестирования показывают, что OpenVZ (ныне Virtuozzo) является одним из наиболее актуальных решений на рынке виртуализации, так как показывает внушительные результаты в различных тестированиях.\r\n\r\n*График времени отклика системы*\r\n![Время отклика системы](https://raw.githubusercontent.com/Amet13/virtuozzo-tutorial/master/images/response-time.png)\r\n\r\nНа графике времени отклика системы можно наблюдать результаты трех тестов — с нагрузкой на систему и виртуальную машину, без нагрузки на систему и ВМ, с нагрузкой на ВМ и без нагрузки на систему.\r\nВо всех тестах OpenVZ показал результаты наименьшего времени отклика, в то время, когда ESXi и Hyper-V показывают оверхед 700-3000%, когда у OpenVZ всего 1-3%.\r\n\r\n*График пропускной способности сети*\r\n![Пропускная способность сети](https://raw.githubusercontent.com/Amet13/virtuozzo-tutorial/master/images/network.png)\r\n\r\nНа втором графике — результаты тестирования пропускной способности сети.\r\nНа графике можно наблюдать, что OpenVZ обеспечивает практическую нативную пропускную способность 10G сети (9.7G отправка и 9.87G прием).\r\n\r\n## Краткая история проекта Virtuozzo\r\nВ 1999 году возникла идея создания Linux контейнеров, а уже в 2002 году компания SWsoft представила первый релиз коммерческой версии Virtuozzo. В том же 2002 году появились первые клиенты в Кремниевой долине.\r\n\r\nВ 2004 году выпуск Virtuozzo для Windows.\r\nВ 2005 году было принято решение о разделении Virtuozzo на два отдельных проекта, свободный OpenVZ (под лицензией GNU GPL) и проприетарный Virtuozzo.\r\n\r\nВ 2006 году OpenVZ стал доступен для Debian Linux, переход к ядру RHEL 4.\r\nВ 2007 году портирован на RHEL 5.\r\n\r\nВ 2011 году появилась идея создания проекта CRIU.\r\nВ 2012 году доступна CRIU v0.1.\r\n\r\nВ конце 2014 года компания Parallels анонсировала открытие кодовой базы Parallels Cloud Server и объединение ее с открытым OpenVZ.\r\n\r\nВ апреле 2015 года был открыт репозиторий с ядром RHEL 7, в мае были открыты исходные коды пользовательских утилит, а в июне выложены тестовые сборки ISO-образов и RPM-пакеты.\r\n\r\n## Установка и подготовительные действия\r\nСуществует три способа установки Virtuozzo:\r\n1. с помощью ISO-образа дистрибутива\r\n2. с помощью установки пакетов и ядра на заранее установленный дистрибутив\r\n3. установка на апстримное ядро\r\n\r\n### Установка Virtuozzo с помощью ISO-образа (bare-metal installation)\r\nДистрибутив Virtuozzo основан на операционой системе [CloudLinux](https://www.cloudlinux.com/) с патчами для ядра RHEL 7, утилитами управления и модифицированным установщиком.\r\nРекомендуется именно этот способ установки Virtuozzo.\r\n\r\nТекущая последняя версия ISO-образа доступна по адресу: https://download.openvz.org/virtuozzo/releases/7.0/x86_64/iso/\r\n\r\nПосле записи дистрибутива на носитель, можно приступать к настройке Virtuozzo.\r\nДля этого необходимо загрузиться с носителя.\r\n\r\n*Экран установки Virtuozzo после загрузки с носителя*\r\n![Экран установки Virtuozzo](https://raw.githubusercontent.com/Amet13/virtuozzo-tutorial/master/images/vz-install/install-vz.png)\r\n\r\nУстановка Virtuozzo ничем не отличается от установки обычного Linux-дистрибутива.\r\nУстановщик Anaconda предложит установить дату и время, раскладку клавиатуры, языковые параметры.\r\nТакже необходимо будет произвести разметку диска и настроить сеть.\r\nПо умолчанию включен kdump, который позволяет в будущем выяснить причины сбоев в ядре, поэтому рекомендуется его не отключать.\r\n\r\n*Экран установки параметров системы*\r\n![Настройки системы](https://raw.githubusercontent.com/Amet13/virtuozzo-tutorial/master/images/vz-install/anaconda.png)\r\n\r\n*Пример разметки для 20GB диска*\r\n![Разметка диска](https://raw.githubusercontent.com/Amet13/virtuozzo-tutorial/master/images/vz-install/partitioning.png)\r\n\r\nНеобходимо для раздела `/` выделить не менее 8GB доступного дискового пространства.\r\nРазмер раздела `swap` равен примерно половине объекма оперативной памяти.\r\nВсе остальное дисковое пространство выделяется под раздел `/vz`.\r\n\r\n*Настройки сетевого интерфейса и имени хоста*\r\n![Настройки сети](https://raw.githubusercontent.com/Amet13/virtuozzo-tutorial/master/images/vz-install/network.png)\r\n\r\nВ настройках сети необходимо указать настройки (скриншот).\r\n\r\nТакже необходимо задать пароль пользователя `root` и создать локального пользователя, например `vzuser`.\r\n\r\n*Задание пароля суперпользователя и создание локального пользователя*\r\n![Настройки пользователей](https://raw.githubusercontent.com/Amet13/virtuozzo-tutorial/master/images/vz-install/user.png)\r\n\r\nПосле установки необходимо перезагрузиться.\r\n\r\nНа этом установка Virtuozzo с помощью ISO-образа завершена.\r\n\r\n*Загрузчик Grub*\r\n![Grub](https://raw.githubusercontent.com/Amet13/virtuozzo-tutorial/master/images/vz-install/grub.png)\r\n\r\nПервый вход в систему осуществляется от пользователя `vzuser`, по SSH.\r\n\r\nПример получения прав суперпользователя на сервере:\r\n```\r\namet13@mint-17 ~ $ ssh vzuser@192.168.0.150\r\nvzuser@192.168.0.150's password: пароль_пользователя_vzuser\r\n[vzuser@virtuozzo ~]$ su -\r\nPassword: пароль_пользователя_root\r\n[root@virtuozzo ~]#\r\n```\r\n\r\n## Лицензия\r\n![CC BY-SA 4.0](https://licensebuttons.net/l/by-sa/4.0/88x31.png)\r\n\r\n[Attribution-ShareAlike 4.0 International (CC BY-SA 4.0)](http://creativecommons.org/licenses/by-sa/4.0/deed.ru)\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}